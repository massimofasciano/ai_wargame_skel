--- ai_wargame.py	2024-01-10 19:35:47.162811226 -0500
+++ ai_wargame_mypy.py	2024-01-10 19:35:44.258762404 -0500
@@ -5,7 +5,7 @@
 from enum import Enum
 from dataclasses import dataclass, field
 from time import sleep
-from typing import Tuple, TypeVar, Type, Iterable, ClassVar
+from typing import Tuple, TypeVar, Type, Iterable, ClassVar, Final
 import random
 import requests
 
@@ -41,27 +41,26 @@
 
 ##############################################################################################################
 
+damage_table : Final[list[list[int]]] = [
+    [3,3,3,3,1], # AI
+    [1,1,6,1,1], # Tech
+    [9,6,1,6,1], # Virus
+    [3,3,3,3,1], # Program
+    [1,1,1,1,1], # Firewall
+]
+repair_table : Final[list[list[int]]] = [
+    [0,1,1,0,0], # AI
+    [3,0,0,3,3], # Tech
+    [0,0,0,0,0], # Virus
+    [0,0,0,0,0], # Program
+    [0,0,0,0,0], # Firewall
+]
+
 @dataclass(slots=True)
 class Unit:
     player: Player = Player.Attacker
     type: UnitType = UnitType.Program
     health : int = 9
-    # class variable: damage table for units (based on the unit type constants in order)
-    damage_table : ClassVar[list[list[int]]] = [
-        [3,3,3,3,1], # AI
-        [1,1,6,1,1], # Tech
-        [9,6,1,6,1], # Virus
-        [3,3,3,3,1], # Program
-        [1,1,1,1,1], # Firewall
-    ]
-    # class variable: repair table for units (based on the unit type constants in order)
-    repair_table : ClassVar[list[list[int]]] = [
-        [0,1,1,0,0], # AI
-        [3,0,0,3,3], # Tech
-        [0,0,0,0,0], # Virus
-        [0,0,0,0,0], # Program
-        [0,0,0,0,0], # Firewall
-    ]
 
     def is_alive(self) -> bool:
         """Are we alive ?"""
@@ -87,14 +86,14 @@
     
     def damage_amount(self, target: Unit) -> int:
         """How much can this unit damage another unit."""
-        amount = self.damage_table[self.type.value][target.type.value]
+        amount = damage_table[self.type.value][target.type.value]
         if target.health - amount < 0:
             return target.health
         return amount
 
     def repair_amount(self, target: Unit) -> int:
         """How much can this unit repair another unit."""
-        amount = self.repair_table[self.type.value][target.type.value]
+        amount = repair_table[self.type.value][target.type.value]
         if target.health + amount > 9:
             return 9 - target.health
         return amount
